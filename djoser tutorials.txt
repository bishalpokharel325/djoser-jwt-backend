step 1: create two folders for backend and frontend and in frontend run 
yarn create react-app .
........................................................
#Before creating backend create fake google account to test
EMAIL: djoserjwtoken@gmail.com
PASSWORD: StrongestPassword1234###
App password: whckcdjapfghvedk9 

# after making dummy email go to myaccounts.ggoogle,com>> securty>> 2 steps verification>> doit
>> comeback and create app password>> other>> webiste>> copy code and paste somewhere



.........................................................
step 2: in backend 
i) create a virtual environment and activate it: 
	python -m venv PythonVE
	PythonVE\Scripts\activate
ii) pip install django-cors-headers djangorestframework djangorestframework-simplejwt pillow django virtualenv django-ckeditor djoser 
iii) create django project: django-admin startproject MainHub

iv) copy .gitignore file from other source and 
/PythonVE/
MainHub/MainHub/secret.py

v) open pycharm and 
i) open the project
ii) create secret.py in MainHub directory beside setting.py
iii) secret.py ma paste secret key in setting.py : KEY = 'ygfd60e33%5yu2qj&zj57=5gf98s3e=l@thpd2)s0rwvt41ok9'
iv) setting.py ma :
	from .secret import KEY
	SECRET_KEY = KEY

vi) create git repo and push code
..................................

step-3:  Configuration in settings.py in MainHub
1) in INSTALLED APP add :
>>>
'corsheaders',
'rest_framework',
'djoser',
'accounts.apps.AccountsConfig'


2) >>>> in middle ware add :
'corsheaders.middleware.CorsMiddleware',

3) >> in Templates:
[os.path.join(BASE_DIR,'build')]

4)>>>
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'build/static')
]
STATIC_ROOT=os.path.join(BASE_DIR,'static')


step-4: open terminal> cd MainHub>> py manage.py startapp accounts

step-5: go to model in accounts directory and write following code for custom user model:

from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.contrib.auth.models import PermissionsMixin
from django.db import models


class UserAccountManager(BaseUserManager):
    def create_user(self, email, name, password=None):
        if not email:
            raise ValueError("User must have an email address")
        email = self.normalize_email(email)
        user = self.model(email=email, name=name)
        user.set_password(password)
        user.save()
        return user


class UserAccount(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(max_length=250, unique=True)
    name = models.CharField(max_length=250, unique=True)
    is_active = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=False)

    objects = UserAccountManager()
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    def get_full_name(self):
        return self.name

    def get_short_name(self):
        return self.name

    def __str__(self):
        return self.email

step-6: Djoser Setup

>>>>>>>>> Open https://djoser.readthedocs.io/en/latest/ djoser documentation
		follow step one by one from documentation OR below same thing
>>>>>>>> 1) in urls.py of MainHub

	urlpatterns = [
    path('auth/', include('djoser.urls')),
    path('auth/', include('djoser.urls.jwt')),
]
urlpatterns+=[re_path(r'^.*',TemplateView.as_view(template_name='index.html'))]
............................................
2) in settings.py

EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST='smtp.gmail.com'
EMAIL_PORT=587
EMAIL_HOST_USER='djoserjwtoken@gmail.com'
EMAIL_HOST_PASSWORD='whckcdjapfghvedk'
EMAIL_USE_TLS=True

3) in documentation click on setting then you will get djoser={}

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE':True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION':True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION':True,
    'SEND_CONFIRMATION_EMAIL':True,
    'SET_USERNAME_RETYPE':True,
    'SET_PASSWORD_RETYPE':True,
    'PASSWORD_RESET_CONFIRM_URL':'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'email/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
	'user_create':'accounts.serializers.UserCreateSerializer',
        'user':'accounts.serializers.UserCreateSerializer',
        'user_delete':'djoser.serializers.UserDeleteSerializer'
    },
}

4) in website authentication backend link scroll below u will get jwt restframework
copy and paste it:

REST_FRAMEWORK = {
'DEFAULT_PERMISSION_CLASSES':[
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
}


step 7: Setting Serializer:

1>>>>> in account folder create serializers.py
from djoser.serializers import UserCreateSerializer
from django.contrib.auth import get_user_model
User=get_user_model()

class UserCreateSerializer(UserCreateSerializer):
    class Meta(UserCreateSerializer.Meta):
        model=User
        fields=('id','email','name','password')

step 8: Run server:
py manage.py makemigrations
py manage.py migrate
py manage.py runserver

step 9:Lets Test them in backend all routes:
go to documentation>> settings>> base end points>> scroll user create 
you can see method... Request... and response with default api url at the top


1) Open Postman: 
Endpoint1: POST http://localhost:8000/auth/users/
Fields: 
{
"email":"bishalpokharel325@gmail.com",
"name":"Bishal Pokharel",
"password":"BishalStrong123###",
"re_password":"BishalStrong123###"
}

save it in new collection: send activation link to email

2) in another tab of postman:

Endpoint2: POST http://localhost:8000/auth/users/activation/
fields:
{
    "uid":"MQ",
    "token":"ajmfui-9317f0b7a1b59ee144d6620a91581dfb"
}

3) Login Request new tab

Endpoint 3: POST http://localhost:8000/auth/jwt/create/
fields:
{
    "email":"bishalpokharel325@gmail.com",
    "password":"BishalStrong123###"
}

we will get refresh token and access token


4) Refresh token regenerate:

Endpoint 4: POST http://localhost:8000/auth/jwt/refresh/
fields:
{
"refresh":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTYxNTk5NTA2NiwianRpIjoiYjAwZDNmNWY2OTllNGFiYmI3OWNhYzU1NjRiNmE2MWQiLCJ1c2VyX2lkIjoxfQ.gnltrlnODMxjm6-LcfOnohivYKskU2gtEc_kRphrvUc"
}
post token of prev token you will get new access token

5) Password Forgot/Reset:

Endpoint 5: POST http://localhost:8000/auth/users/reset_password/

fields:
{
    "email":"bishalpokharel325@gmail.com"
}
Email will be sent to you for verification link

6) Confirm Password:
ENdpoint 6: http://localhost:8000/auth/users/reset_password_confirm/
fields:
{
    "uid":"MQ",
    "token":"ajmgpi-e7e66e72738828641bcc68f3b29fc584",
    "new_password":"BishalNewPassword123###",
    "re_new_password":"BishalNewPassword123###"
}

7) New Password for signed in User
Endpoint 7: http://localhost:8000/auth/users/set_password/

{
    "re_password":"BishalNewPassword123####",
    "re_new_password":"BishalNewPassword123####",
    "current_password":"BishalNewPassword123###"
}
Authorization : JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjE1OTEwODk1LCJqdGkiOiI2MGY0OGQ4OThhY2U0MDc1YjJiOTVmMWM2Y2E3MDRhMiIsInVzZXJfaWQiOjF9.1djQt02m27op7lD-pNUWO8M0eNqGGV7RxjbGLhBidRo
 JWT+ accesstoken
